package groq

// Message represents a message in a chat completion request.
type Message struct {
	Role         string      `json:"role"`                    // "system", "user", "assistant", or "tool"
	Content      interface{} `json:"content,omitempty"`       // string or array, required for most message types
	Name         *string     `json:"name,omitempty"`          // Optional name for participant
	ToolCallId   *string     `json:"tool_call_id,omitempty"`  // For tool messages, DO NOT USE for other types
	FunctionCall interface{} `json:"function_call,omitempty"` // Deprecated, for assistant messages only
	ToolCalls    []ToolCall  `json:"tool_calls,omitempty"`    // For assistant messages with tool calls
	Reasoning    *string     `json:"reasoning,omitempty"`     // For assistant messages, qwen3 models only
}

type Tool struct {
	Description string      `json:"description,omitempty"` // Optional description of the function
	Name        string      `json:"name"`                  // Required name of the function, must be a-z, A-Z, 0-9, or contain underscores and dashes, max length 64
	Parameters  interface{} `json:"parameters,omitempty"`  // Optional parameters as a JSON Schema object, omitting defines an empty parameter list
}

// ToolCall represents a tool call generated by the model, such as a function call.
type ToolCall struct {
	ID       string   `json:"id,omitempty"`       // Unique identifier for the tool call
	Type     string   `json:"type,omitempty"`     // Only "function" is currently supported
	Function Function `json:"function,omitempty"` // The function to be called, with name and arguments
}

// Function represents a function that can be called by the model.
type Function struct {
	Name      string `json:"name"`
	Arguments string `json:"arguments,omitempty"`
}

type ChatCompletionRequest struct {
	Messages            []Message   `json:"messages"`                    // Required
	Model               string      `json:"model"`                       // Required
	ExcludeDomains      []string    `json:"exclude_domains,omitempty"`   // Deprecated
	FrequencyPenalty    *float64    `json:"frequency_penalty,omitempty"` // Range: -2 to 2, defaults to 0
	FunctionCall        interface{} `json:"function_call,omitempty"`     // Deprecated
	Functions           []Function  `json:"functions,omitempty"`         // Deprecated
	IncludeDomains      []string    `json:"include_domains,omitempty"`   // Deprecated
	LogitBias           interface{} `json:"logit_bias,omitempty"`        // Not yet supported
	LogProbs            *bool       `json:"logprobs,omitempty"`          // Not yet supported, defaults to false
	MaxCompletionTokens *int        `json:"max_completion_tokens,omitempty"`
	MaxTokens           *int        `json:"max_tokens,omitempty"`          // Deprecated
	Metadata            interface{} `json:"metadata,omitempty"`            // Not currently supported
	N                   *int        `json:"n,omitempty"`                   // Range: 1-1, defaults to 1
	ParallelToolCalls   *bool       `json:"parallel_tool_calls,omitempty"` // Defaults to true
	PresencePenalty     *float64    `json:"presence_penalty,omitempty"`    // Range: -2 to 2, defaults to 0
	ReasoningEffort     *string     `json:"reasoning_effort,omitempty"`    // "none" or "default", qwen3 models only
	ReasoningFormat     *string     `json:"reasoning_format,omitempty"`    // "hidden", "raw", or "parsed"
	ResponseFormat      interface{} `json:"response_format,omitempty"`
	SearchSettings      interface{} `json:"search_settings,omitempty"`
	Seed                *int        `json:"seed,omitempty"`
	ServiceTier         *string     `json:"service_tier,omitempty"` // "auto", "on_demand", "flex", "performance", or null
	Stop                interface{} `json:"stop,omitempty"`         // string or array, up to 4 sequences
	Store               *bool       `json:"store,omitempty"`        // Not currently supported
	Stream              *bool       `json:"stream,omitempty"`       // Defaults to false
	StreamOptions       interface{} `json:"stream_options,omitempty"`
	Temperature         *float64    `json:"temperature,omitempty"` // Range: 0-2, defaults to 1
	ToolChoice          interface{} `json:"tool_choice,omitempty"`
	Tools               []Tool      `json:"tools,omitempty"`        // Max 128 functions
	TopLogProbs         *int        `json:"top_logprobs,omitempty"` // Range: 0-20, not yet supported
	TopP                *float64    `json:"top_p,omitempty"`        // Range: 0-1, defaults to 1
	User                *string     `json:"user,omitempty"`
}
